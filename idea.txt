make it easy to select elements (for web scraping)
this is useful because in some cases, for example on the youtube homepage, the path could be extremely long:
['grid-disabled', 2, 0, 18, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 1, 3, 6, 1, 3, 3, 0, 4, 2, 0, 2, 0, 0, 0, 0]
(funnily enough this path points to a 'path' element)
if you had to write this using js native functions you would write:
document.getElementsByClassName('grid-disabled')[0]
.childNodes[2].childNodes[0].childNodes[18].childNodes[0].childNodes[6]
.childNodes[0].childNodes[6].childNodes[0].childNodes[6].childNodes[0]
.childNodes[6].childNodes[0].childNodes[6].childNodes[1].childNodes[3]
.childNodes[6].childNodes[1].childNodes[3].childNodes[3].childNodes[0]
.childNodes[4].childNodes[2].childNodes[0].childNodes[2].childNodes[0]
.childNodes[0].childNodes[0].childNodes[0];
you could also use regex to find the element but figuring out the right regex can be quite a challenge.

example:
assign an id to the element you want to get the path to (default = 'get')
then use const path = getPath('yourId') to get the path.
now you can use getElement(path) to get the element

note:
it doesn't allow selecting multiple elements in one command.
although it is possible to make such a function, this would make the usage too complex, defeating the purpose.
a path might not work with multiple pages. in that case regex might be better.